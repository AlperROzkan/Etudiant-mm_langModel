package langModel;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;

import java.util.LinkedList;
import java.util.List;


/**
 * This JUnit Test Class has been generated by right clicking on the NgramUtils class
 * and selecting "New > Junit Test Case". After that, you have to select the methods 
 * for which you would like to generate tests. 
 * In practice, you will duplicate manually the test methods to possibly create 
 * several tests for one method.
 * 
 * Your work is then to remove the fail parts and to implement each test.
 * One method is given as an example
 * 
 * To run them:
 * either right click on the class name or simply on the method name and
 * select "Run As Junit Test".
 * 
 * @author N. Hernandez and S. Quiniou (2015)
 *
 */
public class NgramUtilsTest {
	String sentence = "<s> cette phrase est de taille 9 . </s>";
	String ngram = "o√π commence l' historique de cet n-gramme";
	
	
	/**
	 * Test method for {@link langModel.NgramUtils#getSequenceSize(java.lang.String)}.
	 */
	@Test
	public void testGetSequenceSize() {
	
		System.out.println(NgramUtils.getSequenceSize(sentence));
		// on the left the expected value and on the right the actual one 
		// (i.e. the one returned by your method)
		assertEquals(9, NgramUtils.getSequenceSize(sentence));
	}

	
	/**
	 * Test method for {@link langModel.NgramUtils#generateNgrams(java.lang.String, int, int)}.
	 */
	@Test
	public void testGenerateNgrams() {
		NgramUtils ng = new NgramUtils();
		String s = "Bonjour ceci est un test";
		List<String> res = new LinkedList<>();
		res.add("Bonjour");
		res.add("ceci");
		res.add("est");
		res.add("un");
		res.add("test");
		res.add("Bonjour ceci");
        res.add("ceci est");
        res.add("est un");
        res.add("un test");
        res.add("Bonjour ceci est");
        res.add("ceci est un");
        res.add("est un test");
        res.add("Bonjour ceci est un");
        res.add("ceci est un test");
		assertEquals(res, ng.generateNgrams(s,1,4));
		res.clear();
        assertEquals(res, ng.generateNgrams(s,7,9));
	}

	
	/**
	 * Test method for {@link langModel.NgramUtils#getHistory(java.lang.String, int)}.
	 */
	@Test
	public void testGetHistory() {
        NgramUtils ng = new NgramUtils();
        String s = "l' historique de cette phrase";
	    String res1 = "cette";
        String res2 = "de cette";
        String res3 = "historique de cette";
        String res4 = "l' historique de cette";
        String res5 = "";

        assertEquals(res5, ng.getHistory(s,1));
        assertEquals(res1, ng.getHistory(s,2));
        assertEquals(res2, ng.getHistory(s,3));
        assertEquals(res3, ng.getHistory(s,4));
        assertEquals(res4, ng.getHistory(s,5));

    }

	
	/**
	 * Test method for {@link langModel.NgramUtils#decomposeIntoNgrams(java.lang.String, int)}.
	 */
	@Test
	public void testDecomposeIntoNgrams() {
        NgramUtils ng = new NgramUtils();
        String s = "Bonjour ceci est un test";

        List<String> res1 = new LinkedList<>();
        List<String> res2 = new LinkedList<>();
        List<String> res3 = new LinkedList<>();
        List<String> res4 = new LinkedList<>();
        List<String> res5 = new LinkedList<>();

        res1.add("Bonjour");
        res1.add("ceci");
        res1.add("est");
        res1.add("un");
        res1.add("test");

        res2.add("Bonjour");
        res2.add("Bonjour ceci");
        res2.add("ceci est");
        res2.add("est un");
        res2.add("un test");

        res3.add("Bonjour");
        res3.add("Bonjour ceci");
        res3.add("Bonjour ceci est");
        res3.add("ceci est un");
        res3.add("est un test");

        res4.add("Bonjour");
        res4.add("Bonjour ceci");
        res4.add("Bonjour ceci est");
        res4.add("Bonjour ceci est un");
        res4.add("ceci est un test");

        res5.add("Bonjour");
        res5.add("Bonjour ceci");
        res5.add("Bonjour ceci est");
        res5.add("Bonjour ceci est un");
        res5.add("Bonjour ceci est un test");

        assertEquals(res1, ng.decomposeIntoNgrams(s,1));
        assertEquals(res2, ng.decomposeIntoNgrams(s,2));
        assertEquals(res3, ng.decomposeIntoNgrams(s,3));
        assertEquals(res4, ng.decomposeIntoNgrams(s,4));
        assertEquals(res5, ng.decomposeIntoNgrams(s,5));
        assertEquals(res5, ng.decomposeIntoNgrams(s,10));

    }
    /**
     * Test method for {@link langModel.NgramUtils#getStringOOV(java.lang.String, VocabularyInterface)}.
     */
    @Test
    public void testgetStringOOV() {
        NgramUtils ng = new NgramUtils();
        String s = "Bonjour ceci est un test, je peux te donner un livre, avec tes lunettes tu vois mieux";
        VocabularyInterface vocab1 = new Vocabulary();
        vocab1.addWord("vois");
        vocab1.addWord("te");
        vocab1.addWord("Bonjour");
        vocab1.addWord("je");
        String UNK = Vocabulary.OOV_TAG;
        assertEquals("Bonjour " + UNK + " " + UNK + " " + UNK + " " + UNK + " je " + UNK + " te " + UNK + " " + UNK + " " + UNK + " " + UNK + " " + UNK + " " + UNK + " " + UNK + " vois " + UNK, ng.getStringOOV(s,vocab1));
        //assertEquals("Bonjour UNK UNK UNK UNK, je UNK te UNK UNK UNK UNK UNK UNK UNK vois UNK", ng.getStringOOV(s,vocab1));



    }
	
	
	/**
	 * The following code displays a separator 
	 * between each method output
	 * 
	 * (manually added)
	 **/
	@Rule
	public TestName name = new TestName();

	@Before
	public void printSeparator()
	{
		System.out.println("\n=== " + name.getMethodName() + " =====================");
	}

}
